{
	"info": {
		"_postman_id": "33b3172b-144c-476f-8ff5-75843315ad91",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//проверка на статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//проверка, что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function (){\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//проверка на статус код 200\r",
							"pm.test(\"Status code is 200\", function (){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name = Anya\", function (){\r",
							"    pm.expect(jsonData.name).to.eql(\"Anya\");\r",
							"})\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age = 20\", function (){\r",
							"    pm.expect(jsonData.age).to.eql(\"20\");\r",
							"})\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary = 1500\", function (){\r",
							"    pm.expect(jsonData.salary).to.eql(1500);\r",
							"})\r",
							"\r",
							"//Спарсить request\r",
							"var reqData = request.data\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"User name = Anya\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"User age = 20\", function (){\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"})\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"User salary = 1500\", function (){\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"})\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"var fam = pm.response.json();\r",
							"var fam_1 = fam.family;\r",
							"\r",
							"console.log (fam_1)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year = salary * 4\", function (){\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqData.salary * 4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//проверка статус кода 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var respData = pm.response.json();\r",
							"//Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject()\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name = Vova\", function (){\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age = 26\", function () {\r",
							"    pm.expect(respData.age).to.eql(reqData.age);\r",
							"})\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"console.log (typeof(reqData.salary))\r",
							"let salary_cons = +reqData.salary\r",
							"console.log (typeof(salary_cons))\r",
							"\r",
							"pm.test(\"salary = 3000 \", function () {\r",
							"    pm.expect(salary_cons).to.eql(respData.salary)\r",
							"})\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"let fam = pm.response.json();\r",
							"let family_cons = fam.family;\r",
							"console.log (family_cons)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has name\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"age\")\r",
							"})\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name = Luky\", function () {\r",
							"    pm.expect(respData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"})\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age = 4\", function () {\r",
							"    pm.expect(respData.family.pets.dog.age).to.eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vova",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "26",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salare",
							"value": "2300",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Vova&age=26&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vova"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let respData=pm.response.json()\r",
							"//Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject()\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name = Katya\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name)\r",
							"})\r",
							"\r",
							"console.log(reqData.age)\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age = 20\", function () {\r",
							"    pm.expect(respData.age).to.eql(+reqData.age)\r",
							"})\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(\"Request - \" + reqData.salary)\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(\"Response - \" + respData.salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(respData.salary[0])\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(respData.salary[1])\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(respData.salary[2])\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\\\r",
							"pm.test(\"Salary №0 = 2000\", function () {\r",
							"    pm.expect(respData.salary[0]).to.eql(2000)\r",
							"})\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let salary_1 = +respData.salary[1]\r",
							"console.log(typeof(salary_1))\r",
							"\r",
							"pm.test(\"Salary №1 = salary №0 * 2 = 4000\", function () {\r",
							"    pm.expect(salary_1).to.eql(reqData.salary*2)\r",
							"})\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let salary_2 = +respData.salary[2]\r",
							"console.log(typeof(salary_2))\r",
							"\r",
							"pm.test(\"Salary №2 = salary №0 * 3 = 8000\", function () {\r",
							"    pm.expect(salary_2).to.eql(reqData.salary*3)\r",
							"})\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"let name_1 = respData.name\r",
							"pm.environment.set(\"name_\", name_1);\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"let age_1 = respData.age\r",
							"pm.environment.set(\"age_\", age_1)\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"let salary_0 = respData.salary[0]\r",
							"pm.environment.set(\"salary_\", salary_0)\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"let salary_c = respData.salary\r",
							"console.log(salary_c)\r",
							"\r",
							"for (let i=0; i < salary_c.lenght; i++){\r",
							"    console.log(salary_c[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Katya",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "20",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Katya&age=20&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Katya"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//проверка статус кода 200\r",
							"pm.test(\"Status code is 200\", function (){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let respData = pm.response.json();\r",
							"//Спарсить request.\r",
							"let reqData = request.data\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"// let a = respData.start_qa_salary\r",
							"// console.log(typeof(start_qa_salary))\r",
							"\r",
							"pm.test(\"Json has start salary\", function() {\r",
							"    pm.expect(respData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Json has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Json has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Json has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Json has qa_salary_after_3.5_year\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Json has person\", function () {\r",
							"    pm.expect(respData).to.have.property(\"person\")\r",
							"})\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = salary = 1000\", function () {\r",
							"    pm.expect(respData.start_qa_salary).to.eql(1000)\r",
							"})\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 = 2000\", function () {\r",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(reqData.salary*2)\r",
							"})\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7 = 2700\", function () {\r",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(reqData.salary*2.7)\r",
							"})\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3 = 3300\", function () {\r",
							"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.eql(reqData.salary*3.3)\r",
							"})\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8 = 3800\", function () {\r",
							"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql(reqData.salary*3.8)\r",
							"})\r",
							"\r",
							"//  Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary = 1000\", function() {\r",
							"    pm.expect(respData.person.u_name[1]).to.eql(1000)\r",
							"})\r",
							"\r",
							"//  Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Age = 25\", function () {\r",
							"    pm.expect(respData.person.u_age).to.eql(25)\r",
							"})\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = salary*4.2 = 4200\", function () {\r",
							"    pm.expect(respData.person.u_salary_5_years).to.eql(reqData.salary*4.2)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}